#include <vector>
#include <string>
#include <iostream>
#include <algorithm>


void subsets_ii_iterative(const std::vector<int>& input, 
						  std::vector<std::vector<int>>& output)
{
	std::vector<int> nums = input;
	
	// The algorithm only works if the numbers are sorted
	std::sort(nums.begin(), nums.end());

	output.push_back({});
	int prev_end = 0;

	for (int i = 0; i < nums.size(); ++i) {
		int start = 0;
		int end = output.size();

		// Check if we've seen the number before
		// Guaranteed to work since we sorted nums 
		// beforehand
		if (i > 0 && nums[i] == nums[i - 1]) {
			// Only generate subsets using the subsets 
			// generated by the previous iteration
			start = prev_end;
		}

		// Generate new subsets
		// Either use all prior subsets or just the 
		// subsets generated from the prior iteration 
		// which is determined by the start index
		for (; start < end; ++start) {
			std::vector<int> current = output[start];
			current.push_back(nums[i]);
			output.push_back(current);
		}

		// Keep track of the iteration's endpoint
		// which may be used as the start of the
		// next iteration if we hit a duplicate number
		prev_end = end;
	}
}

void dump(const std::vector<std::vector<int>>& arr) {
	for (int i = 0; i < arr.size(); ++i) {
		for (int j = 0; j < arr[i].size(); ++j) {
			std::cout << arr[i][j] << ",";
		}
		std::cout << std::endl;
	}
}


int main() {

	std::vector<int> nums = { 3, 1,2,2,2 };
	std::vector<std::vector<int>> output;

	subsets_ii_iterative(nums, output);

	dump(output);

	return 0;
}